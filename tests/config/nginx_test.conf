worker_processes  1;
error_log logs/error.log debug;
pid logs/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_upstream_mgmt_module.so;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    
    # Logging format for debugging
    log_format upstream_mgmt '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent" '
                            'upstream_addr="$upstream_addr" '
                            'upstream_status="$upstream_status"';
    
    access_log logs/access.log upstream_mgmt;
    
    # Rate limiting for API endpoints
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    
    upstream backend {
        server 127.0.0.1:8081 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8082 weight=1 max_fails=3 fail_timeout=30s;
        server 127.0.0.1:8083 weight=1 max_fails=3 fail_timeout=30s backup;
    }
    
    upstream api_backend {
        server 127.0.0.1:9001;
        server 127.0.0.1:9002;
    }
    
    server {
        listen 8080;
        server_name localhost;
        
        # API endpoint with security and rate limiting
        location /api/upstreams {
            upstream_mgmt;
            
            # Security headers
            add_header X-Content-Type-Options nosniff;
            add_header X-Frame-Options DENY;
            add_header X-XSS-Protection "1; mode=block";
            
            # Rate limiting
            limit_req zone=api burst=20 nodelay;
            
            # Access control
            allow 127.0.0.1;
            allow ::1;
            deny all;
            
            # Request size limits
            client_max_body_size 1k;
            client_body_buffer_size 1k;
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Main application proxy
        location / {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            
            # Upstream handling
            proxy_next_upstream error timeout invalid_header http_500 http_502 http_503 http_504;
            proxy_connect_timeout 5s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            
            # Add upstream info to response headers for testing
            add_header X-Upstream-Addr $upstream_addr always;
            add_header X-Upstream-Status $upstream_status always;
        }
    }
}