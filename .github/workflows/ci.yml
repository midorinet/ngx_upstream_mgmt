name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-versions.outputs.matrix }}
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Create version checker script
      run: |
        mkdir -p scripts
        cat > scripts/version_checker.py << 'EOL'
        import os
        import requests
        from bs4 import BeautifulSoup
        from requests.adapters import HTTPAdapter
        from requests.packages.urllib3.util.retry import Retry

        def fetch_url(url):
            session = requests.Session()
            retries = Retry(total=3, backoff_factor=1, status_forcelist=[500, 502, 503, 504])
            session.mount("https://", HTTPAdapter(max_retries=retries))
            response = session.get(url, timeout=10)
            response.raise_for_status()
            return response

        def extract_versions(soup, stable_label, mainline_label, prefix):
            versions = {"stable": None, "mainline": None}
            for tag in soup.find_all(["strong", "h4"]):
                text = tag.get_text(strip=True).lower()
                if stable_label in text:
                    table_or_next = tag.find_next(["a", "table"])
                    if table_or_next:
                        version_link = table_or_next.find("a", href=True, string=lambda s: s and prefix in s)
                        if version_link:
                            versions["stable"] = version_link.string.split('-')[1].strip('.tar.gz')
                elif mainline_label in text:
                    table_or_next = tag.find_next(["a", "table"])
                    if table_or_next:
                        version_link = table_or_next.find("a", href=True, string=lambda s: s and prefix in s)
                        if version_link:
                            versions["mainline"] = version_link.string.split('-')[1].strip('.tar.gz')
            return versions

        def get_nginx_versions():
            url = "https://nginx.org/en/download.html"
            try:
                print(f"Fetching {url}...")
                response = fetch_url(url)
            except requests.RequestException as e:
                print(f"Error fetching {url}: {e}")
                return {"stable": None, "mainline": None}

            soup = BeautifulSoup(response.text, 'html.parser')
            return extract_versions(soup, "stable version", "mainline version", "nginx-")

        def get_freenginx_versions():
            url = "https://freenginx.org/en/download.html"
            try:
                print(f"Fetching {url}...")
                response = fetch_url(url)
            except requests.RequestException as e:
                print(f"Error fetching {url}: {e}")
                return {"stable": None, "mainline": None}

            soup = BeautifulSoup(response.text, 'html.parser')
            return extract_versions(soup, "stable version", "mainline version", "freenginx-")

        def main():
            nginx_versions = get_nginx_versions()
            freenginx_versions = get_freenginx_versions()

            versions = []
            if nginx_versions['stable']:
                versions.append(f"nginx-{nginx_versions['stable']}")
            if nginx_versions['mainline']:
                versions.append(f"nginx-{nginx_versions['mainline']}")
            if freenginx_versions['stable']:
                versions.append(f"freenginx-{freenginx_versions['stable']}")
            if freenginx_versions['mainline']:
                versions.append(f"freenginx-{freenginx_versions['mainline']}")

            print(f"::set-output name=matrix::{versions}")

        if __name__ == "__main__":
            main()
        EOL

    - name: Get latest versions
      id: get-versions
      run: python scripts/version_checker.py

  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev check

    - name: Run unit tests
      run: |
        # Compile and run unit tests
        cd tests/unit
        gcc -o test_module test_*.c -lcheck -lpthread -lrt -lm
        ./test_module

  integration-tests:
    needs: [check-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.check-versions.outputs.matrix) }}
        config: [
          'default',
          'debug',
          'with-threads',
          'with-http_ssl_module'
        ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev python3-pytest curl

    - name: Parse version info
      id: parse
      run: |
        IFS=- read -r type version <<< "${{ matrix.version }}"
        echo "TYPE=$type" >> $GITHUB_OUTPUT
        echo "VERSION=$version" >> $GITHUB_OUTPUT

    - name: Download and Extract
      run: |
        if [[ "${{ steps.parse.outputs.TYPE }}" == "nginx" ]]; then
          wget https://nginx.org/download/nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
        else
          wget https://freenginx.org/download/freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
        fi

    - name: Build with different configurations
      run: |
        BUILD_DIR="${{ steps.parse.outputs.TYPE }}-${{ steps.parse.outputs.VERSION }}"
        cd $BUILD_DIR
        
        CONFIG_OPTS="--add-dynamic-module=../"
        case "${{ matrix.config }}" in
          debug)
            CONFIG_OPTS="$CONFIG_OPTS --with-debug"
            ;;
          with-threads)
            CONFIG_OPTS="$CONFIG_OPTS --with-threads"
            ;;
          with-http_ssl_module)
            CONFIG_OPTS="$CONFIG_OPTS --with-http_ssl_module"
            ;;
        esac
        
        ./configure $CONFIG_OPTS
        make modules

    - name: Run integration tests
      run: |
        cd tests/integration
        pytest -v test_*.py

  cross-platform:
    needs: [check-versions]
    strategy:
      matrix:
        version: ${{ fromJson(needs.check-versions.outputs.matrix) }}
        container: [
          'ubuntu:22.04',
          'ubuntu:20.04',
          'debian:bullseye',
          'debian:bookworm',
          'centos:7',
          'rockylinux:8',
          'fedora:latest'
        ]
      fail-fast: false

    runs-on: ubuntu-latest
    container: ${{ matrix.container }}

    steps:
    - uses: actions/checkout@v3

    - name: Install build dependencies (Debian/Ubuntu)
      if: contains(matrix.container, 'ubuntu') || contains(matrix.container, 'debian')
      run: |
        apt-get update
        apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev wget

    - name: Install build dependencies (CentOS/Rocky)
      if: contains(matrix.container, 'centos') || contains(matrix.container, 'rocky')
      run: |
        yum install -y gcc make pcre-devel zlib-devel openssl-devel wget

    - name: Install build dependencies (Fedora)
      if: contains(matrix.container, 'fedora')
      run: |
        dnf install -y gcc make pcre-devel zlib-devel openssl-devel wget

    - name: Parse version info
      id: parse
      run: |
        IFS=- read -r type version <<< "${{ matrix.version }}"
        echo "TYPE=$type" >> $GITHUB_OUTPUT
        echo "VERSION=$version" >> $GITHUB_OUTPUT

    - name: Download and Extract
      run: |
        if [[ "${{ steps.parse.outputs.TYPE }}" == "nginx" ]]; then
          wget https://nginx.org/download/nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
        else
          wget https://freenginx.org/download/freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
        fi

    - name: Build Module
      run: |
        BUILD_DIR="${{ steps.parse.outputs.TYPE }}-${{ steps.parse.outputs.VERSION }}"
        cd $BUILD_DIR
        ./configure --with-compat --add-dynamic-module=../
        make modules

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.version }}-${{ matrix.container }}-modules
        path: ${{ steps.parse.outputs.TYPE }}-${{ steps.parse.outputs.VERSION }}/objs/*.so

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v3

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev

    - name: Get latest stable Nginx version
      run: |
        STABLE_VERSION=$(curl -s https://nginx.org/en/download.html | grep -oP 'nginx-\K[0-9]+\.[0-9]+\.[0-9]+(?=\.tar\.gz)' | head -1)
        echo "NGINX_VERSION=$STABLE_VERSION" >> $GITHUB_ENV

    - name: Download Nginx for build
      run: |
        wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz
        tar -xzf nginx-${NGINX_VERSION}.tar.gz

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Build with configure
      run: |
        cd nginx-1.24.0
        ./configure --with-compat --add-dynamic-module=../
        make modules

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:cpp"

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check Documentation
      run: |
        if [ ! -f "README.md" ]; then
          echo "README.md is missing"
          exit 1
        fi