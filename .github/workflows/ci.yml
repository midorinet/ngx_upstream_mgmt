name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly to check against new nginx versions

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-versions.outputs.matrix }}
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4
    
    - name: Get latest versions
      id: get-versions
      run: python .github/workflows/version_checker.py

  build:
    needs: check-versions
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.check-versions.outputs.matrix) }}
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev

    - name: Parse version info
      id: parse
      run: |
        IFS=- read -r type version <<< "${{ matrix.version }}"
        echo "TYPE=$type" >> $GITHUB_OUTPUT
        echo "VERSION=$version" >> $GITHUB_OUTPUT

    - name: Cache source
      uses: actions/cache@v3
      with:
        path: ${{ matrix.version }}
        key: ${{ matrix.version }}-source

    - name: Download and Extract
      if: steps.cache-source.outputs.cache-hit != 'true'
      run: |
        if [[ "${{ steps.parse.outputs.TYPE }}" == "nginx" ]]; then
          wget https://nginx.org/download/nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
        else
          wget https://freenginx.org/download/freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
        fi

    - name: Static Code Analysis
      run: |
        sudo apt-get install -y cppcheck
        cppcheck --enable=all --suppress=missingInclude .

    - name: Build Module
      run: |
        cd ${{ matrix.version }}
        ./configure --with-compat --add-dynamic-module=../
        make modules

    - name: Run Tests
      run: |
        # Add your test commands here
        # Example:
        # make test

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: nginx-modules-${{ matrix.version }}
        path: ${{ matrix.version }}/objs/*.so

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  style-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install clang-format
      run: sudo apt-get install -y clang-format

    - name: Check Code Style
      run: |
        find . -name '*.c' -o -name '*.h' | xargs clang-format -style=file -n -Werror

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check Documentation
      run: |
        if [ ! -f "README.md" ]; then
          echo "README.md is missing"
          exit 1
        fi
        # Add more documentation checks as needed