name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    - cron: '0 0 * * 0'  # Run weekly

jobs:
  check-versions:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-versions.outputs.matrix }}
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests beautifulsoup4

    - name: Create version checker script
      run: |
        mkdir -p scripts
        cat > scripts/version_checker.py << 'EOL'
        import os
        import requests
        from bs4 import BeautifulSoup
        from requests.adapters import HTTPAdapter
        from requests.packages.urllib3.util.retry import Retry

        def fetch_url(url):
            session = requests.Session()
            retries = Retry(total=3, backoff_factor=1, status_forcelist=[500, 502, 503, 504])
            session.mount("https://", HTTPAdapter(max_retries=retries))
            response = session.get(url, timeout=10)
            response.raise_for_status()
            return response

        def extract_versions(soup, stable_label, mainline_label, prefix):
            versions = {"stable": None, "mainline": None}
            for tag in soup.find_all(["strong", "h4"]):
                text = tag.get_text(strip=True).lower()
                if stable_label in text:
                    table_or_next = tag.find_next(["a", "table"])
                    if table_or_next:
                        version_link = table_or_next.find("a", href=True, string=lambda s: s and prefix in s)
                        if version_link:
                            versions["stable"] = version_link.string.split('-')[1].strip('.tar.gz')
                elif mainline_label in text:
                    table_or_next = tag.find_next(["a", "table"])
                    if table_or_next:
                        version_link = table_or_next.find("a", href=True, string=lambda s: s and prefix in s)
                        if version_link:
                            versions["mainline"] = version_link.string.split('-')[1].strip('.tar.gz')
            return versions

        def get_nginx_versions():
            url = "https://nginx.org/en/download.html"
            try:
                print(f"Fetching {url}...")
                response = fetch_url(url)
            except requests.RequestException as e:
                print(f"Error fetching {url}: {e}")
                return {"stable": None, "mainline": None}

            soup = BeautifulSoup(response.text, 'html.parser')
            return extract_versions(soup, "stable version", "mainline version", "nginx-")

        def get_freenginx_versions():
            url = "https://freenginx.org/en/download.html"
            try:
                print(f"Fetching {url}...")
                response = fetch_url(url)
            except requests.RequestException as e:
                print(f"Error fetching {url}: {e}")
                return {"stable": None, "mainline": None}

            soup = BeautifulSoup(response.text, 'html.parser')
            return extract_versions(soup, "stable version", "mainline version", "freenginx-")

        def main():
            nginx_versions = get_nginx_versions()
            freenginx_versions = get_freenginx_versions()

            versions = []
            if nginx_versions['stable']:
                versions.append(f"nginx-{nginx_versions['stable']}")
            if nginx_versions['mainline']:
                versions.append(f"nginx-{nginx_versions['mainline']}")
            if freenginx_versions['stable']:
                versions.append(f"freenginx-{freenginx_versions['stable']}")
            if freenginx_versions['mainline']:
                versions.append(f"freenginx-{freenginx_versions['mainline']}")

            print(f"::set-output name=matrix::{versions}")

        if __name__ == "__main__":
            main()
        EOL

    - name: Get latest versions
      id: get-versions
      run: python scripts/version_checker.py

  unit-tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev check

    - name: Run unit tests
      run: |
        cd tests/unit
        gcc -o test_module test_module.c -I. -lcheck -lpthread -lrt -lm -lsubunit
        ./test_module

  integration-tests:
    needs: [check-versions]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ${{ fromJson(needs.check-versions.outputs.matrix) }}
        config: [
          'default',
          'debug',
          'with-threads',
          'with-http_ssl_module'
        ]
      fail-fast: false

    steps:
    - uses: actions/checkout@v3

    - name: Install test dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev python3-pytest python3-requests nginx curl

    - name: Parse version info
      id: parse
      shell: bash
      run: |
        version="${{ matrix.version }}"
        type=$(echo "$version" | cut -d'-' -f1)
        ver=$(echo "$version" | cut -d'-' -f2)
        echo "TYPE=$type" >> "$GITHUB_OUTPUT"
        echo "VERSION=$ver" >> "$GITHUB_OUTPUT"

    - name: Download and Extract
      id: download
      run: |
        if [ "${{ steps.parse.outputs.TYPE }}" = "nginx" ]; then
          wget https://nginx.org/download/nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          BUILD_DIR="nginx-${{ steps.parse.outputs.VERSION }}"
        else
          wget https://freenginx.org/download/freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          BUILD_DIR="freenginx-${{ steps.parse.outputs.VERSION }}"
        fi
        echo "BUILD_DIR=$BUILD_DIR" >> "$GITHUB_OUTPUT"

    - name: Build and Test Module
      env:
        MODULE_PATH: ${{ github.workspace }}/${{ steps.download.outputs.BUILD_DIR }}/objs/ngx_http_upstream_mgmt_module.so
      run: |
        cd "${{ steps.download.outputs.BUILD_DIR }}"
        mkdir -p objs
        
        # Configure and build
        CONFIG_OPTS="--add-dynamic-module=../ --prefix=$(pwd)/install"
        case "${{ matrix.config }}" in
          debug)
            CONFIG_OPTS="$CONFIG_OPTS --with-debug"
            ;;
          with-threads)
            CONFIG_OPTS="$CONFIG_OPTS --with-threads"
            ;;
          with-http_ssl_module)
            CONFIG_OPTS="$CONFIG_OPTS --with-http_ssl_module"
            ;;
        esac
        
        echo "Running ./configure $CONFIG_OPTS"
        ./configure $CONFIG_OPTS
        make
        make install
        
        # Verify module was built
        echo "Checking built module:"
        ls -l objs/ngx_http_upstream_mgmt_module.so
        file objs/ngx_http_upstream_mgmt_module.so
        
        # Set path to our custom-built nginx
        NGINX_BIN=$(pwd)/install/sbin/nginx
        chmod +x $NGINX_BIN
        
        # Run integration tests
        cd ..
        echo "Using module at: ${MODULE_PATH}"
        echo "Using nginx binary at: ${NGINX_BIN}"
        cd tests/integration
        PYTHONPATH=. NGINX_BIN="${NGINX_BIN}" python3 -m pytest -v test_upstream_mgmt.py --log-cli-level=DEBUG

  cross-platform:
    needs: [check-versions]
    strategy:
      matrix:
        version: ${{ fromJson(needs.check-versions.outputs.matrix) }}
        distro: [
          {name: 'ubuntu-2204', container: 'ubuntu:22.04'},
          {name: 'ubuntu-2004', container: 'ubuntu:20.04'},
          {name: 'debian-bullseye', container: 'debian:bullseye'},
          {name: 'debian-bookworm', container: 'debian:bookworm'},
          {name: 'fedora-latest', container: 'fedora:latest'}
        ]
        include:
          - version: ${{ fromJson(needs.check-versions.outputs.matrix)[0] }}
            distro: {name: 'centos-7', container: 'centos:7'}
            use-composite: true
          - version: ${{ fromJson(needs.check-versions.outputs.matrix)[0] }}
            distro: {name: 'rocky-8', container: 'rockylinux:8'}
            use-composite: true
      fail-fast: false

    runs-on: ${{ matrix.use-composite && 'ubuntu-20.04' || 'ubuntu-latest' }}
    container: ${{ !matrix.use-composite && matrix.distro.container || '' }}

    steps:
    - uses: actions/checkout@v3

    - name: Install build dependencies (Debian/Ubuntu)
      if: contains(matrix.distro.container, 'ubuntu') || contains(matrix.distro.container, 'debian')
      shell: bash
      run: |
        set -x  # Enable debug output
        apt-get update
        apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev wget file
        gcc --version

    - name: Install build dependencies (Fedora)
      if: contains(matrix.distro.container, 'fedora')
      shell: bash
      run: |
        set -x  # Enable debug output
        dnf install -y gcc make pcre-devel zlib-devel openssl-devel wget file
        gcc --version

    - name: Setup RHEL-based environment
      if: matrix.use-composite
      uses: docker://quay.io/${{ matrix.distro.container }}
      with:
        args: >
          bash -c "
          if command -v yum &> /dev/null; then
            yum install -y gcc make pcre-devel zlib-devel openssl-devel wget file;
          else
            dnf install -y gcc make pcre-devel zlib-devel openssl-devel wget file;
          fi;
          gcc --version;
          cd /github/workspace;
          if [ '${{ steps.parse.outputs.TYPE }}' = 'nginx' ]; then
            wget --no-verbose https://nginx.org/download/nginx-${{ steps.parse.outputs.VERSION }}.tar.gz;
            tar -xzf nginx-${{ steps.parse.outputs.VERSION }}.tar.gz;
            cd nginx-${{ steps.parse.outputs.VERSION }};
          else
            wget --no-verbose https://freenginx.org/download/freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz;
            tar -xzf freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz;
            cd freenginx-${{ steps.parse.outputs.VERSION }};
          fi;
          ./configure --with-compat --add-dynamic-module=../;
          make modules;
          ls -l objs/*.so;
          file objs/*.so;
          "

    - name: Parse version info
      id: parse
      shell: bash
      run: |
        set -x  # Enable debug output
        version="${{ matrix.version }}"
        type=$(echo "$version" | cut -d'-' -f1)
        ver=$(echo "$version" | cut -d'-' -f2)
        echo "TYPE=$type" >> "$GITHUB_OUTPUT"
        echo "VERSION=$ver" >> "$GITHUB_OUTPUT"
        echo "Parsed type: $type"
        echo "Parsed version: $ver"

    - name: Download and Extract
      id: download
      if: "!matrix.use-composite"
      shell: bash
      run: |
        set -x  # Enable debug output
        if [ "${{ steps.parse.outputs.TYPE }}" = "nginx" ]; then
          wget --no-verbose https://nginx.org/download/nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf nginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          BUILD_DIR="nginx-${{ steps.parse.outputs.VERSION }}"
        else
          wget --no-verbose https://freenginx.org/download/freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          tar -xzf freenginx-${{ steps.parse.outputs.VERSION }}.tar.gz
          BUILD_DIR="freenginx-${{ steps.parse.outputs.VERSION }}"
        fi
        echo "BUILD_DIR=$BUILD_DIR" >> "$GITHUB_OUTPUT"
        echo "Directory contents:"
        ls -la

    - name: Build Module
      if: "!matrix.use-composite"
      shell: bash
      run: |
        set -x  # Enable debug output
        cd "${{ steps.download.outputs.BUILD_DIR }}"
        echo "Current directory: $(pwd)"
        echo "Running configure..."
        ./configure --with-compat --add-dynamic-module=../
        echo "Running make..."
        make modules
        echo "Build complete. Checking module:"
        ls -l objs/ngx_http_upstream_mgmt_module.so
        file objs/ngx_http_upstream_mgmt_module.so

    - name: Upload Build Artifacts (Container)
      if: "!matrix.use-composite"
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.version }}-${{ matrix.distro.name }}-modules
        path: |
          ${{ steps.download.outputs.BUILD_DIR }}/objs/*.so
          ${{ steps.download.outputs.BUILD_DIR }}/objs/*.a
        if-no-files-found: error

    - name: Upload Build Artifacts (Composite)
      if: matrix.use-composite
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.version }}-${{ matrix.distro.name }}-modules
        path: |
          /github/workspace/nginx-${{ steps.parse.outputs.VERSION }}/objs/*.so
          /github/workspace/nginx-${{ steps.parse.outputs.VERSION }}/objs/*.a
        if-no-files-found: error

  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    
    steps:
    - uses: actions/checkout@v3

    - name: Install build dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcre3-dev zlib1g-dev libssl-dev

    - name: Get latest stable Nginx version
      run: |
        STABLE_VERSION=$(curl -s https://nginx.org/en/download.html | grep -oP 'nginx-\K[0-9]+\.[0-9]+\.[0-9]+(?=\.tar\.gz)' | head -1)
        echo "NGINX_VERSION=$STABLE_VERSION" >> $GITHUB_ENV

    - name: Download Nginx for build
      run: |
        wget https://nginx.org/download/nginx-${NGINX_VERSION}.tar.gz
        tar -xzf nginx-${NGINX_VERSION}.tar.gz

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: cpp

    - name: Build with configure
      run: |
        BUILD_DIR="nginx-${NGINX_VERSION}"
        cd $BUILD_DIR
        ./configure --with-compat --add-dynamic-module=../
        make modules

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:cpp"

  documentation:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Check Documentation
      run: |
        if [ ! -f "README.md" ]; then
          echo "README.md is missing"
          exit 1
        fi